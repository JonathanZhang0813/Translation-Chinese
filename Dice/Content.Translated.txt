*** 1d9b324d51b0a5cdea13d2e026a86a1c
## 这个模型是什么？

“骰子”是一个通过进行和分析实验来学习概率的虚拟实验室。您可以通过为每个骰子选择面值组合来设置实验，例如 3 和 4（我们将始终使用此示例）。然后模型重复“掷”两个骰子并记录它的骰子与您选择的组合相匹配的频率。

模型的骰子可以通过两种方式匹配您的初始组合：它们可以以相同的顺序显示相同的数字；或者无论顺序如何，它们都可以显示相同的数字。该模型收集两种匹配的统计数据。模型中的图表和监视器为您提供了对累积数据的不同视角。

该模型是 ProbLab 课程的一部分。有关 ProbLab 课程的更多信息，请参阅 http://ccl.northwestern.edu/curriculum/ProbLab/。

## 这个模型是怎么运行的

用户为每个骰子选择一个面值。按下 **Roll Dice** 后，模型会一遍又一遍地掷虚拟骰子，以测试用户选择的组合的掷骰频率。直方图**Successes-per-Sample Distributions**，显示了成功虚拟滚动的频率。

## 教学笔记

该模型介绍了用于描述随机事件的工具、概念、表示和词汇。引入的概念包括“抽样”和“分布”。

各种 ProbLab 模型使用基于虚拟计算机的“对象”来教授概率。在这个模型中，这些对象是虚拟骰子，类似于熟悉的物理骰子。通过使用熟悉的对象，我们希望帮助学习者从他们的日常经验到更抽象的概念之间架起一座概念桥梁。使用 Dice 模型有助于学生准备好体验使用不太熟悉的虚拟对象的其他 ProbLab 模型。

鼓励协调员介绍这个模型，作为对真实骰子实验的增强。与真正的骰子相比，该模型有几个优点。虚拟骰子滚动速度更快，计算机可以同时从多个角度即时准确地记录结果。

该模型试图通过允许学习者在运行实验之前选择组合来让他们参与进来。

## 这个模型怎么用

按 **setup**，然后按 **Pick Values**。通过单击视图顶部的骰子，您可以循环浏览骰子的每个可能面以最终设置组合，例如 [3; 4].完成后，取消按 **Pick Values**。按 **Roll Dice** 开始实验。如果您将 **单次成功？** 开关设置为“打开”，则实验将在您选择的组合或组合排列滚动时停止（取决于所选的 **分析类型**）。如果 **single-success?** 为“Off”，实验将继续运行多次，次数与您设置的 **sample-size** 和 **total-samples** 滑块的值相同。在图表窗口中，您可以看到直方图开始堆叠，显示模型按原始顺序（**组合**）滚动你的对的次数，以及它发现你按任何顺序配对的次数（**排列**）。

＃＃＃ 纽扣：

**设置**：开始新实验

**选择值**：允许您使用鼠标点击方块来选择目标骰子面。重复点击同一个方块，通过每个可能的面值选项循环骰子面。

**隐藏/显示**：在隐藏和显示您选择的骰子之间切换。当您向朋友出谜语并且不想让他们知道您选择的是什么骰子时，此功能很有用。

**Roll Dice**：激活计算机骰子的滚动。该程序会生成随机的骰子面，并将结果与您的组合相匹配。

### 开关：

**单次成功？**：组合匹配一次后停止滚动。

**bars?**：在两个图形选项之间切换：“On”是直方图，“Off”是折线图。

###选择：

**分析型**

* &quot;Permutations&quot;: 顺序无关紧要，所以 &#39;4 3&#39; 被认为与其排列 &#39;3 4&#39; 相同（它被注册为成功）
*“组合”：顺序很重要，因此“4 3”不被接受为与其排列“3 4”相同（未注册为成功）
* “两者”：“排列”和“组合”都算作成功

###滑块：

**sample-size**：样本中掷骰子的数量

**样本总数**：您在整个实验过程中采集的样本数。

### 监视器：

**#samples**：显示在这个实验中到目前为止已经采集了多少样本

**+ # Rolls**：显示当前样本中发生了多少单次滚动。

**组合**：显示当前样本中的成功次数（顺序很重要）

**排列**：显示当前样本中的成功次数（顺序无关紧要）

**均值组合**：成功的样本均值（顺序很重要）。这仅针对完整、完整的样本进行计算。

**均值排列**：成功的样本均值（顺序无关紧要）。这仅针对完整、完整的样本进行计算。

**组合：排列**：成功的“组合”和“排列”掷骰之间的比率。这仅针对完整、完整的样本进行计算。

###情节：

**Successes-per-sample Distributions**：每个样本的成功数。例如，如果在前五个样本中，组合匹配了 3 次、2 次、4 次、7 次和 4 次，则“组合”直方图在 2、3 和 7 上的高度相同，但是它将是 4 的两倍，因为 4 出现了两次。

## 看一看

随着实验的进行，图表中结果的分布逐渐呈现出钟形曲线。

当模型掷骰子时，观察显示器**组合**和**排列**。注意他们是否以相同的速度更新他们的价值。对于您设置的大多数组合，**排列**更新得更快。这是因为每次模型滚动您选择的值时，**排列**都会注册成功，即使它们以不同的顺序出现也是如此。

当模型掷骰子时，观察显示器**组合：排列**。一开始变化很快，后来变化的频率越来越低。最终，它似乎稳定在某个值上。这是为什么？

除非红色直方图（显示排列）完全覆盖黑色直方图（显示组合），否则您会看到排列直方图总是变得比组合直方图更宽和更短。此外，排列直方图通常比组合直方图覆盖更大的值范围。尝试解释为什么排列分布比组合分布具有更大的方差。

此外，您可能会注意到排列直方图和组合直方图覆盖相同的区域。这是因为每个直方图的总面积，无论它们沿水平轴的位置如何，也无论它们的图形如何，都表示样本数。因为两个直方图代表相同数量的样本，所以它们具有相同的面积。

## 试一试

一般来说，排列总是比组合多吗？

运行一个样本量为 20 的实验，然后使用相同的设置运行它，但样本量为 100 或更多。在每个实验中，查看 **Successes-per-sample Distributions** 的分布。查看小样本实验如何产生半钟形曲线，而大样本实验如何产生全钟形曲线。这是为什么？

在创建组合后按 **隐藏/显示** 可以让您设置一个实验供朋友运行。您的朋友将不知道组合是什么，并且必须分析图表和监视器以做出有根据的猜测。您可能会发现某些组合比其他组合更难猜。这是为什么？例如，比较组合 [1; 1] 和 [3; 4].有没有什么好方法可以确定我们是否正在处理双打？这个问题也和下面的东西有关，可以试试。

对于您选择的某些骰子值，如果模型在 **analysis-type** 选择的“两者”选项下掷骰子，您将在 **Successes-per-sample Distributions** 中仅看到一个直方图。尝试选择产生单个直方图的骰子组合。这些骰子组合有什么共同点？为什么你认为你只观察到一个直方图？另一个直方图在哪里？当您只有一个直方图时，监视器的行为如何？

当组合直方图和排列直方图不重叠时，我们可以说它们的均值之间沿 x 轴的距离。模型中的哪个元素会影响它们之间的距离？例如，为了使这些直方图之间的距离更大，您应该怎么做？是什么导致了窄直方图？它们真的变窄了，还是仅仅是因为最大 x 轴值更大，所以直方图“拥挤”了？

将 **sample-size** 设置为 360，将 **total-samples** 设置为其最大值。选择骰子 [3; 4]，并运行实验。组合条件的平均值约为 10（顺序很重要，因此只有 [3; 4] 被视为成功），排列条件的平均值约为 20（顺序无关紧要） ，所以 [3; 4] 和 [4; 3] 都被认为是成功的）。为什么是 10 和 20？当我们考虑顺序时，有 6*6=36 个不同的骰子对：[1; 1] [1; 2] [1; 3] [1; 4] [1; 5] ... [6; 4] [6; 5] [6; 6].因此，36 个卷的样本平均出现一次 [3; 4] 和单次出现 [4; 3].因此，360 的样本有 10 倍： [3; 10 次出现； 4] 和 [4] 中的 10； 3]，平均。

## 改一改

添加第 7 个模面。然后你可以用 7 面骰子进行实验！

添加组合和排列之间的比率图表。

目前，该模型只是随机掷骰子，并在掷骰与您选择的骰子值相似时记录下来。该模型能否使用更有效的搜索过程来猜测您的骰子？例如，当其中一个方块的骰子面正确时，程序将继续只猜测另一个骰子。另一个想法可能是创建一个系统的搜索过程。

跟踪模型从一个成功到另一个成功需要多长时间应该很有趣。为此添加代码、监视器和图表。

## NetLogo 语言特性

我们依靠迭代来均匀分布模型中的骰子。我们不是对每个骰子的 x 和 y 值进行硬编码，而是计算它们之间的“间距”，并迭代骰子的数量 (2)。这样做的好处是，如果我们想添加更多骰子，或者如果我们决定更改模型视图的大小，骰子仍会均匀分布。

“骰子”的一个有趣特征是选择骰子面值的过程，这在许多其他模型中都没有出现。查看“工具”下拉菜单中的“形状编辑器”。您会发现六种模具形状：“1”、“2”、“3”、“4”、“5”和“6”。对您来说，很明显三个点表示“3”，这与数字 3 相同，但除非您“告诉”它，否则程序不会“知道”这一点。当我们检查计算机是否找到组合时，这不是问题，我们只需要比较形状的名称：是“三”、“3”还是“犀牛”，重要的是它们匹配.

但是，当我们想要将骰子的面更改为某个数字时，我们需要将此数字转换为字符串。 NetLogo 有 `word` 原语：`(word 3)` 会将数字 `3` 转换为字符串 `&quot;3&quot;`。到目前为止一切顺利，但是当您点击一个骰子并且它转到下一个值时会发生什么？计算机擅长加数字，但不擅长加字符串！该程序需要查看图形的名称（在我们的示例中为“3”），将其转换为数字，向其添加“1”，然后将其转换回字符串（“4”） ) 得到正确的图形。 `read-from-string` 原语完成从字符串到数字的转换。

还有一个更复杂的问题！如果我们已经在 6 号面，我们向它加 1 怎么办？我们得到“7”，但我们想回到面 1。[modulo](https://en.wikipedia.org/wiki/Modulo_operation) 数学运算（“mod”，在 NetLogo 中）可以在这里帮助我们：任何数字 mod 6 的结果将始终是从 0 到 5 的数字。要将任何数字（在我们的示例中为“7”）转换为从 1 到 6 的骰子面，我们从数字中减去一个，应用“mod 6”，加回一个，瞧！这个小舞会由‘shape-for’报告指令负责。

提示：如果你想为骰子添加第七面，就像上面建议的那样，你需要修改 `shape-for` 报告指令...

## 相关模型

The ProbLab model Random Combinations and Permutations builds on Dice. There, you can work with more than just 2 dice at a time. Also, you can work with colors instead of dice faces.

## 引用和致谢

This model is a part of the ProbLab curriculum. For more information about the ProbLab Curriculum please refer to http://ccl.northwestern.edu/curriculum/ProbLab/.

## 如何引用本模型

If you mention this model or the NetLogo software in a publication, we ask that you include the citations below.

For the model itself:

* Abrahamson, D. and Wilensky, U. (2004).  NetLogo Dice model.  http://ccl.northwestern.edu/netlogo/models/Dice.  Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

Please cite the NetLogo software as:

* Wilensky, U. (1999). NetLogo. http://ccl.northwestern.edu/netlogo/. Center for Connected Learning and Computer-Based Modeling, Northwestern University, Evanston, IL.

## 版权和授权

Copyright 2004 Uri Wilensky.

![CC BY-NC-SA 3.0](http://ccl.northwestern.edu/images/creativecommons/byncsa.png)

This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 License.  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0/ or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.

Commercial licenses are also available. To inquire about commercial licenses, please contact Uri Wilensky at uri@northwestern.edu.

This model was created as part of the projects: PARTICIPATORY SIMULATIONS: NETWORK-BASED DESIGN FOR SYSTEMS LEARNING IN CLASSROOMS and/or INTEGRATED SIMULATION AND MODELING ENVIRONMENT. The project gratefully acknowledges the support of the National Science Foundation (REPP & ROLE programs) -- grant numbers REC #9814682 and REC-0126227.

<!-- 2004 Cite: Abrahamson, D. -->